worker_processes auto;
pid /run/nginx.pid;

events {
    worker_connections 1024;
    use epoll;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Logging
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log warn;

    # Performance optimizations
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 100M;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types text/plain text/css text/xml text/javascript 
               application/json application/javascript 
               application/xml+rss application/rss+xml 
               font/truetype font/opentype 
               application/vnd.ms-fontobject 
               image/svg+xml;

    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "no-referrer-when-downgrade" always;

    # Upstream backend
    upstream backend {
        server backend:8004;
        keepalive 32;
    }

    server {
        listen 80;
        server_name localhost;

        # Root directory for frontend static files
        root /usr/share/nginx/html;
        index index.html;

        # Frontend static files
        location / {
            try_files $uri $uri/ /index.html;
            
            # Cache static assets aggressively
            location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
                expires 1y;
                add_header Cache-Control "public, immutable";
            }
            
            # Service Worker - NEVER cache
            location = /serviceWorker.js {
                add_header Cache-Control "no-cache, no-store, must-revalidate";
                add_header Pragma "no-cache";
                add_header Expires "0";
                add_header Service-Worker-Allowed "/";
            }
            
            # PWA Manifest - minimal cache
            location = /manifest.json {
                add_header Cache-Control "no-cache, must-revalidate";
            }
            
            # HTML files - no cache
            location ~* \.html$ {
                add_header Cache-Control "no-cache, no-store, must-revalidate";
            }
        }

        # API proxy to backend
        location /api {
            proxy_pass http://backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
            proxy_read_timeout 300s;
            proxy_connect_timeout 75s;
            proxy_send_timeout 300s;
            
            # Buffering settings
            proxy_buffering on;
            proxy_buffer_size 4k;
            proxy_buffers 8 4k;
            proxy_busy_buffers_size 8k;
        }

        # Health check endpoint
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }

        # Error pages
        error_page 404 /index.html;
        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
            root /usr/share/nginx/html;
        }
    }

    # HTTPS server configuration (uncomment after SSL setup)
    # server {
    #     listen 443 ssl http2;
    #     server_name yourdomain.com www.yourdomain.com;
    #
    #     # SSL certificate paths (Let's Encrypt or custom)
    #     ssl_certificate /etc/letsencrypt/live/yourdomain.com/fullchain.pem;
    #     ssl_certificate_key /etc/letsencrypt/live/yourdomain.com/privkey.pem;
    #     
    #     # SSL configuration
    #     ssl_protocols TLSv1.2 TLSv1.3;
    #     ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384;
    #     ssl_prefer_server_ciphers off;
    #     ssl_session_cache shared:SSL:10m;
    #     ssl_session_timeout 10m;
    #     
    #     # HSTS (uncomment after testing)
    #     # add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    #     
    #     # Same configuration as HTTP server
    #     root /usr/share/nginx/html;
    #     index index.html;
    #     
    #     location / {
    #         try_files $uri $uri/ /index.html;
    #         
    #         location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
    #             expires 1y;
    #             add_header Cache-Control "public, immutable";
    #         }
    #         
    #         location = /serviceWorker.js {
    #             add_header Cache-Control "no-cache, no-store, must-revalidate";
    #             add_header Service-Worker-Allowed "/";
    #         }
    #     }
    #     
    #     location /api {
    #         proxy_pass http://backend;
    #         proxy_http_version 1.1;
    #         proxy_set_header Upgrade $http_upgrade;
    #         proxy_set_header Connection "upgrade";
    #         proxy_set_header Host $host;
    #         proxy_set_header X-Real-IP $remote_addr;
    #         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    #         proxy_set_header X-Forwarded-Proto $scheme;
    #         proxy_cache_bypass $http_upgrade;
    #         proxy_read_timeout 300s;
    #         proxy_connect_timeout 75s;
    #     }
    # }
    
    # HTTP to HTTPS redirect (uncomment after SSL setup)
    # server {
    #     listen 80;
    #     server_name yourdomain.com www.yourdomain.com;
    #     return 301 https://$server_name$request_uri;
    # }
}
